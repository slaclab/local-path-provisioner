name: build
on:
  push:
    branches:
    - main
    - v*
    tags:
    - v*
  pull_request:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
    - name: Checkout Codes
      uses: actions/checkout@v4

    # Build binaries
    - name: Run CI
      run: make ci

    # Run e2e test
    - name: Run e2e Test
      run: make e2e-test

    # Upload binaries
    - name: Upload Binaries
      uses: actions/upload-artifact@v4
      with:
        name: binaries_artifact
        path: ./bin/*

  build_push_image:
    name: Build and Push Images
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      id-token: write
      packages: write
      attestations: write
    needs: build
    if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/') }}
    steps:
    - name: Checkout Codes
      uses: actions/checkout@v4

    - name: Download Binaries
      uses: actions/download-artifact@v4
      with:
        name: binaries_artifact
        path: ./bin/

    - name: Add Executable Permission
      run: |
        chmod +x ./bin/*

    - name: Copy bin Folder to package Folder
      run: |
        cp -r ./bin ./package/

    # For multi-platform support
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

##########################################################
# slaclab ghcr push
##########################################################
    - name: Checkout repository
      uses: actions/checkout@v4
    # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
  
##########################################################
# removed:  rancher push 
##########################################################
#    - name: Read Secrets
#      uses: rancher-eio/read-vault-secrets@main
#      with:
#        secrets: |
#          secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials username | DOCKER_USERNAME ;
#          secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials password | DOCKER_PASSWORD
#
#    - name: Get Branch Name
#      run: |
#        echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> "$GITHUB_ENV"
#    - name: Login to Docker Hub
#      uses: docker/login-action@v3
#      with:
#        username: ${{ env.DOCKER_USERNAME }}
#        password: ${{ env.DOCKER_PASSWORD }}
#
#    # rancher/local-path-provisioner image
#    - name: docker-publish
#      if: ${{ startsWith(github.ref, 'refs/heads/') }}
#      uses: docker/build-push-action@v5
#      with:
#        context: ./
#        push: true
#        platforms: linux/amd64,linux/arm64,linux/arm,linux/riscv64
#        tags: rancher/local-path-provisioner:${{ env.branch }}-head
#        file: package/Dockerfile
#
#    - name: docker-publish-with-tag
#      if: ${{ startsWith(github.ref, 'refs/tags/') }}
#      uses: docker/build-push-action@v5
#      with:
#        context: ./
#        push: true
#        platforms: linux/amd64,linux/arm64,linux/arm,linux/riscv64
#        tags: rancher/local-path-provisioner:${{ github.ref_name }}
#        file: package/Dockerfile
#
##########################################################
